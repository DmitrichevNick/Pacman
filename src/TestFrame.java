import Enums.CellObjectType;
import Enums.MoveType;
import MapModule.CreatureCellObject;
import MapModule.Labyrinth;
import MapModule.Map;
import ServerModule.Player;
import ServerModule.Session;
import java.util.ArrayList;
import java.util.TimerTask;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.util.Duration;
import javafx.util.Pair;
import java.util.Timer;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author August
 */
public class TestFrame extends javax.swing.JFrame {

    private static Updater _updater;
    /**
     * Creates new form TestFrame
     */
    public TestFrame() throws InterruptedException {
        initComponents();
        _updater = new Updater(this);
        _session = new Session("TEST");
        _session.AddPlayer(UUID.randomUUID());
        _session.AddGhost(UUID.randomUUID());
        _session.AddGhost(UUID.randomUUID());  
        UpdateField();
        //_session.GetPlayers().get(0).GetPacman().SetNextDir(MoveType.TopMove);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPane1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane1);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       Uppp();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane1KeyPressed
        switch (evt.getExtendedKeyCode()) {
            case 37:
                _session.GetPlayers().get(0).GetPacman().SetNextDir(MoveType.LeftMove);
                break;
            case 38:
                _session.GetPlayers().get(0).GetPacman().SetNextDir(MoveType.TopMove);
                break;
            case 39:
                _session.GetPlayers().get(0).GetPacman().SetNextDir(MoveType.RightMove);
                break;
            case 40:
                _session.GetPlayers().get(0).GetPacman().SetNextDir(MoveType.BottomMove);
                break;
        }
    }//GEN-LAST:event_jTextPane1KeyPressed

    public void Uppp(){
        _session.Update();
        UpdateField();
    }
    private Session _session;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {               
                    TestFrame frame = new TestFrame();
                    frame.setVisible(true);                                      
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    private void UpdateField(){
        Map map = _session.GetMap();
        Labyrinth labyrinth = map.GetLabyrinth();
        jTextPane1.setText("");
        ArrayList<Player> players = _session.GetPlayers();
        ArrayList<CreatureCellObject> ghosts = _session.GetGhosts();
        String field = new String();
        for(int i = 0; i< 20;i++){
            for(int j = 0; j<20; j++){
                boolean isPlayerTime=false;
                boolean isGhostTime =false;
                for (int k =0;k<players.size();k++){
                    Player player= players.get(k);
                    if((int)player.GetPosition().getKey()==i && (int)player.GetPosition().getValue()==j){
                        isPlayerTime = true;
                        break;
                    }
                }
                for (int k =0;k<ghosts.size();k++){
                    CreatureCellObject player= ghosts.get(k);
                    if((int)player.GetPosition().getKey()==i && (int)player.GetPosition().getValue()==j){
                        isGhostTime = true;
                        break;
                    }
                }
                if(isPlayerTime)
                    field+=2;
                else if(isGhostTime)
                    field+=3;
                else
                    field +=labyrinth.GetCell(new Pair(i,j)).GetCellObjectType()==CellObjectType.WallObject?1:0;
                isPlayerTime = false;
            }
            field+='\n';
        }
        jTextPane1.setText(field);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
